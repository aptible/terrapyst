from .exceptions import TerraformError as TerraformError, TerraformRuntimeError as TerraformRuntimeError
from .mixins import TerraformRun as TerraformRun
from .plan import TerraformPlan as TerraformPlan
from _typeshed import Incomplete
from pathlib import Path
from typing import Optional

logger: Incomplete

class TerraformWorkspace(TerraformRun):
    backend_config_path: Incomplete
    terraform_path: Incomplete
    version: Incomplete
    is_outdated: Incomplete
    platform: Incomplete
    provider_selections: Incomplete
    cwd: Incomplete
    env: Incomplete
    def __init__(self, path: Incomplete | None = ..., backend_config_path: Optional[Path] = ...) -> None: ...
    def init(self): ...
    def validate(self): ...
    def plan(self, error_function: Incomplete | None = ..., output_function: Incomplete | None = ..., output_path: Incomplete | None = ..., destroy: bool = ...): ...
    def apply(self, error_function: Incomplete | None = ..., output_function: Incomplete | None = ..., auto_approve: bool = ..., plan_file: Incomplete | None = ...): ...
    def destroy(self, auto_approve: bool = ..., error_function: Incomplete | None = ..., output_function: Incomplete | None = ...): ...
    def output(self): ...
    def get(self, update: bool = ...): ...
